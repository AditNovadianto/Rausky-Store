// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role?     @default(USER)
    accounts      Account[]
    sessions      Session[]
    orders        Order[]
    Product       Product[]
}

enum Category {
    UNCATEGORIZE

    // TOPUP
    MOBILE_LEGEND
    VALORANT
    FREE_FIRE
    NETFLIX

    // OTHERS
    GAMING_GEAR
    MERCHANDISE
}

model Product {
    id          String             @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    price       Int
    discount    Int?               @default(0)
    stock       Int?               @default(0)
    category    Category?          @default(UNCATEGORIZE)
    orders      ProductsOnOrders[]
    userId      String
    user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model ProductsOnOrders {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    productId String
    amount    Int
    orderId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
    id           String             @id @default(auto()) @map("_id") @db.ObjectId
    total        Int?
    tax          Int?
    notes        Json? // used to send game information (e.g nickname, id)
    paymentUrl   String?
    paymentToken String?
    products     ProductsOnOrders[]
    userId       String
    user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
}
